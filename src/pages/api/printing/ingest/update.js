import clientPromise from '@/lib/mongodb';
import dayjs from '@/lib/time';

import { PrintStates } from '@/util/states';

export default async function handler(req, res) {
    const mongoClient = await clientPromise;

    const body = req.body;

    if (req.method === 'PUT') {
        const linkedPrintId = body.id;
        const action = body.action;

        const print = await mongoClient.db('printing').collection('print-log').findOne({
            linkedPrintId: linkedPrintId
        });

        // if the print isnt found tell andrew to link it
        if (!print) {
            res.status(400).json({
                success: false,
                type: 'nolink',
                message: 'Print not linked'
            });
            return;
        }

        // 1 = start print
        if (action === PrintStates.PRINTING) {
            // check if a print is running on the printer
            const runningPrint = await mongoClient.db('printing').collection('print-log').findOne({
                printer: print.printer,
                state: PrintStates.PRINTING
            });

            if (runningPrint) {
                res.status(400).json({
                    success: false,
                    type: 'printerbusy',
                    message: 'Printer still running a print'
                });
                return;
            }

            // create a new event
            const events = [
                {
                    type: PrintStates.PRINTING,
                    timestamp: dayjs().utc().toISOString(),
                    notes: '[AUTOGENERATED]'
                },
                ...print.events
            ];

            // update the print state to printing
            const data = await mongoClient
                .db('printing')
                .collection('print-log')
                .findOneAndUpdate(
                    {
                        linkedPrintId: linkedPrintId
                    },
                    {
                        $set: {
                            state: PrintStates.PRINTING,
                            events: events,
                            updatedAt: dayjs().utc().toISOString()
                        }
                    }
                );

            // update printer
            const printer = await mongoClient
                .db('printing')
                .collection('printers')
                .findOneAndUpdate(
                    {
                        id: print.printer
                    },
                    {
                        $set: {
                            currentTray: print._id.toString(),
                            updatedAt: dayjs().utc().toISOString()
                        }
                    }
                );

            res.status(200).json({
                success: true
            });
        } else if (action === PrintStates.COMPLETED) {
            // check if this print is running on the printer
            const printerPre = await mongoClient.db('printing').collection('printers').findOne({
                id: print.printer
            });

            if (printerPre.currentTray !== print._id.toString()) {
                res.status(400).json({
                    success: false,
                    type: 'notrunning',
                    message: 'Print not found running on its expected printer'
                });
                return;
            }

            // create a new event
            const events = [
                {
                    type: PrintStates.COMPLETED,
                    timestamp: dayjs().utc().toISOString(),
                    notes: '[AUTOGENERATED]'
                },
                ...print.events
            ];

            // update the print state to completed and add event
            const data = await mongoClient
                .db('printing')
                .collection('print-log')
                .findOneAndUpdate(
                    {
                        linkedPrintId: linkedPrintId
                    },
                    {
                        $set: {
                            state: PrintStates.COMPLETED,
                            events: events,
                            updatedAt: dayjs().utc().toISOString()
                        }
                    }
                );

            // update printer and pop print from queue
            const printerPost = await mongoClient
                .db('printing')
                .collection('printers')
                .findOneAndUpdate(
                    {
                        id: print.printer
                    },
                    {
                        $pull: {
                            queue: print._id.toString()
                        },
                        $set: {
                            updatedAt: dayjs().utc().toISOString()
                        }
                    }
                );

            res.status(200).json({
                success: true
            });
        } else if (action === PrintStates.FAILED) {
            // check if this print is running on the printer
            const printerPre = await mongoClient.db('printing').collection('printers').findOne({
                id: print.printer
            });

            if (printerPre.currentTray !== print._id.toString()) {
                res.status(400).json({
                    success: false,
                    type: 'notrunning',
                    message: 'Print not found running on its expected printer'
                });
                return;
            }

            // create a new event
            const events = [
                {
                    type: PrintStates.FAILED,
                    timestamp: dayjs().utc().toISOString(),
                    notes: '[AUTOGENERATED]'
                },
                ...print.events
            ];

            // update the print state to completed and add event
            const data = await mongoClient
                .db('printing')
                .collection('print-log')
                .findOneAndUpdate(
                    {
                        linkedPrintId: linkedPrintId
                    },
                    {
                        $set: {
                            state: PrintStates.FAILED,
                            events: events,
                            updatedAt: dayjs().utc().toISOString()
                        }
                    }
                );

            res.status(200).json({
                success: true
            });
        } else {
            res.status(400).json({
                success: false,
                type: 'invalidaction',
                message: 'Invalid action'
            });
        }
    }
}
